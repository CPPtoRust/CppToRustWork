 /*************************************************************************
 * This file was generated by CRUST by an automated semantics preserving
 * translation from C/C++ to Rust
 * CRUST isn't perfect and may require manual editing
 * Check warnings and errors and refer to the official Rust Documentation
 ************************************************************************/
 /* This may look like C code, but it is really -*- C++ -*- */
 
 
 /* Keyword list.

   Copyright (C) 2002 Free Software Foundation, Inc.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 
 
/** Crust doesn't resolve C/C++ dependencies or included header.
* You may have to define your own module and implement those functionality in Rust 
* Or you can translate header file with Crust to produce Rust code. * 
* >>>>>>>> # ifndef keyword_list_h 
 # define keyword_list_h 1 
 
 # include "keyword.h" 
 
 /* List node of a linear list of Keyword.  */ 
 class Keyword_List 
 { 
 public : 
 /* Constructor.  */ 
 Keyword_List ( Keyword * car ) ; 
 
 /* Access to first element of list.  */ 
 Keyword * first ( ) const ; 
 /* Access to next element of list.  */ 
 Keyword_List * & rest ( ) ; 
 
 protected : 
 Keyword_List * _cdr ; 
 Keyword * const _car ; 
 } ; 
 
 /* List node of a linear list of KeywordExt.  */ 
 class KeywordExt_List : public Keyword_List 
 { 
 public : 
 /* Constructor.  */ 
 KeywordExt_List ( KeywordExt * car ) ; 
 
 /* Access to first element of list.  */ 
 KeywordExt * first ( ) const ; 
 /* Access to next element of list.  */ 
 KeywordExt_List * & rest ( ) ; 
 } ; 
 
 /* Copies a linear list, sharing the list elements.  */ 
 extern Keyword_List * copy_list ( Keyword_List * list ) ; 
 extern KeywordExt_List * copy_list ( KeywordExt_List * list ) ; 
 
 /* Deletes a linear list, keeping the list elements in memory.  */ 
 extern void delete_list ( Keyword_List * list ) ; 
 
 /* Sorts a linear list, given a comparison function.
   Note: This uses a variant of mergesort that is *not* a stable sorting
   algorithm.  */ 
 extern Keyword_List * mergesort_list ( Keyword_List * list , 
 bool ( * less ) ( Keyword * keyword1 , 
 Keyword * keyword2 ) ) ; 
 extern KeywordExt_List * mergesort_list ( KeywordExt_List * list , 
 bool ( * less ) ( KeywordExt * keyword1 , 
 KeywordExt * keyword2 ) ) ; 
 
 # ifdef __OPTIMIZE__ 
 
 # define INLINE inline 
 # include "keyword-list.icc" 
 # undef INLINE 
 
 # endif 
 
 # endif 
