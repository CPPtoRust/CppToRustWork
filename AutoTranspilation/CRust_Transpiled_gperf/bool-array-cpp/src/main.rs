 /*************************************************************************
 * This file was generated by CRUST by an automated semantics preserving
 * translation from C/C++ to Rust
 * CRUST isn't perfect and may require manual editing
 * Check warnings and errors and refer to the official Rust Documentation
 ************************************************************************/
 /* Inline Functions for bool-array.{h,cc}.

   Copyright (C) 1989-1998, 2002 Free Software Foundation, Inc.
   Written by Douglas C. Schmidt <schmidt@ics.uci.edu>
   and Bruno Haible <bruno@clisp.org>.

   This file is part of GNU GPERF.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
   // This needs:
 //#include <stdio.h>
 //#include <string.h>
 //#include "options.h"
  /* Initializes the bit array with room for SIZE bits, numbered from
   0 to SIZE-1. */
  INLINE  Bool_Array :: Bool_Array ( unsigned int size )  : _size ( size ) ;  _iteration_number ( 1 ) ;  _storage_array ( new unsigned int [ size ] )  {  memset ( _storage_array , 0 , size * sizeof ( _storage_array [ 0 ] ) ) ;  if ( option [ DEBUG ] ) == true {  fprintf ( stderr , "\nbool array size = %d, total bytes = %d\n" ,  _size ,  static_cast < unsigned int > ( _size * sizeof ( _storage_array [ 0 ] ) ) ) ; }    /* Sets the specified bit to true.
   Returns its previous value (false or true).  */
  INLINE 
/*Crust with Strict Mode enabled, declares all variables as immutable.
 * If you are mutating the below variable anywhere in program, please change the declaration statement as
 * let mut var_name:type=init_val;
 **/
 static _iteration_number : bool ;  else {  {  /* The last operation on this bit was clear().  Set it now.  */
  _storage_array [ index ] = _iteration_number ; }  
/** Crust tries to identify return statement and replace with rust equivalent
 * shorthand notation. If error found in this line, Please replace shorthand notation 
 * with return statement 
 **/
 return false ;     /* Resets all bits to zero.  */
  INLINE 
/*Crust with Strict Mode enabled, declares all variables as immutable.
 * If you are mutating the below variable anywhere in program, please change the declaration statement as
 * let mut var_name:type=init_val;
 **/
 static _iteration_number : void = 1; ;  memset ( _storage_array , 0 , _size * sizeof ( _storage_array [ 0 ] ) ) ;  if ( option [ DEBUG ] ) == true {  {  fprintf ( stderr , "(re-initialized bool_array)\n" ) ; }  fflush ( stderr ) ;    