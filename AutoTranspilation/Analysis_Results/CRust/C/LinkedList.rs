/*************************************************************************
		* This file was generated by CRUST by an automated semantics preserving
		* translation from C/C++ to Rust
		* CRUST isn't perfect and may require manual editing
		* Check warnings and errors and refer to the official Rust Documentation
		************************************************************************/
		// C program to implement a
		// linked list
		
		/** Crust doesn't resolve C/C++ dependencies or included header.
		* You may have to define your own module and implement those functionality in Rust 
		* Or you can translate header file with Crust to produce Rust code. * 
		* >>>>>>>> # include < stdio . h >
		**/

		
		
		/** Declaration of a structure should be completed with initialization of it's fields
		* It should be in the following format
		* let variable:struct_name = struct_name { member1:value1, member2:value2,..}
		*/ 
		let = Node { }; 
		
		/** Declaration of a structure should be completed with initialization of it's fields
		* It should be in the following format
		* let variable:struct_name = struct_name { member1:value1, member2:value2,..}
		*/ 
		let * = Node { }; 
		; 
		
		// Driver's code
		fn main ( ) { 
			
			/** Declaration of a structure should be completed with initialization of it's fields
			* It should be in the following format
			* let variable:struct_name = struct_name { member1:value1, member2:value2,..}
			*/ let * = Node { }; 
			
			/** Declaration of a structure should be completed with initialization of it's fields
			* It should be in the following format
			* let variable:struct_name = struct_name { member1:value1, member2:value2,..}
			*/ let * = Node { }; 
			
			/** Declaration of a structure should be completed with initialization of it's fields
			* It should be in the following format
			* let variable:struct_name = struct_name { member1:value1, member2:value2,..}

			*/ let * = Node { }; 
			
			// allocate 3 nodes in the heap
			head = ( ; 
			second = ( ; 
			third = ( ; 
			
			
			head . data = 1 ; // assign data in first node
			head . next = second ; // Link first node with
			// the second node
			

			// assign data to second node
			second . data = 2 ; 
			
			// Link second node with the third node
			second . next = third ; 
			
			third . data = 3 ; // assign data to third node
			third . next = NULL ; 
			
			
			/** Crust tries to identify return statement and replace with rust equivalent
			* shorthand notation. If error found in this line, Please replace shorthand notation 
			* with return statement 
			**/
			return 0 ; 
		}